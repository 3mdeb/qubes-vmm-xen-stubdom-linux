#!/bin/sh

set -e
set -x
mount -t devtmpfs none /dev
mount -t sysfs /sys /sys
mount -t proc /proc /proc

echo 1 > /proc/sys/vm/overcommit_memory

: > /dev/mdev.seq
: > /dev/mdev.log
echo /bin/mdev > /proc/sys/kernel/hotplug

if test -e /sys/class/net/eth0; then
  ip link set eth0 address fe:ff:ff:ff:ff:fe
  ip addr flush eth0
  ip link set eth0 up
  brctl addbr br0
  brctl addif br0 eth0
  ip link set br0 up
  client_ip=$(xenstore-read $(xenstore-read device/vif/0/backend)/ip)
  net_prefix="${client_ip%.*}"
  udhcpd -f -I $net_prefix.1 - <<EOC &
start $client_ip
end $client_ip
max_leases 1

interface br0

lease_file /dev/null

opt dns $net_prefix.1 $net_prefix.254
opt subnet 255.255.255.0
opt router $net_prefix.1
EOC
else
  echo "No network interface named eth0."
  ls -l /sys/class/net/
fi

domid=$(/bin/xenstore-read "target")
vm_path=$(xenstore-read "/local/domain/$domid/vm")
dm_args=$(xenstore-read "$vm_path/image/dmargs")

mkdir /tmp/qmp
mkdir /tmp/qmp/req
mkdir /tmp/qmp/res

kernel=
if [ -b /dev/xvdd ]; then
    mkdir /tmp/boot
    mount /dev/xvdd /tmp/boot -o ro
    if [ -f /tmp/boot/vmlinuz ]; then
        kernel="$kernel -kernel /tmp/boot/vmlinuz"
    fi
    if [ -f /tmp/boot/initramfs ]; then
        kernel="$kernel -initrd /tmp/boot/initramfs"
    fi
fi

mkfifo /tmp/qmp/qemu.in /tmp/qmp/qemu.out
if [ -f /tmp/boot/cmdline.txt ]; then
    qemu -chardev pipe,path=/tmp/qmp/qemu,id=m -mon chardev=m,mode=control \
        $dm_args $kernel -append "$(cat /tmp/boot/cmdline.txt)" &
else
    qemu -chardev pipe,path=/tmp/qmp/qemu,id=m -mon chardev=m,mode=control \
        $dm_args $kernel &
fi

qemu_pid=$!

(
set +x
IFS= read -r line
echo "$line" >&2
echo '{"execute": "qmp_capabilities"}' | tee /proc/self/fd/2
IFS= read -r line
echo "$line" >&2
while true; do
  id=$(ls -t /tmp/qmp/req | head -n 1)
  if [ "$id" = "" ]; then
    sleep 0.1
    continue
  fi

  echo $id >&2
  cat /tmp/qmp/req/$id | tee /proc/self/fd/2
  rm /tmp/qmp/req/$id
  while IFS= read -r line; do
    echo "$line" >&2
    # we can't grep directly because we can't control grep's buffering
    if ! echo "$line" | grep -q '"event"\s*:'; then
      break
    fi
    sleep 0.5
  done
  echo "$line" > /tmp/qmp/new-res
  mv /tmp/qmp/new-res /tmp/qmp/res/$id
done
) >/tmp/qmp/qemu.in </tmp/qmp/qemu.out &

while true; do
  sleep 1d
done
