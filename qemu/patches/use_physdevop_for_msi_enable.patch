Index: qemu/hw/xen/xen_pt_msi.c
===================================================================
--- qemu.orig/hw/xen/xen_pt_msi.c
+++ qemu/hw/xen/xen_pt_msi.c
@@ -233,14 +233,26 @@ static int msi_msix_disable(XenPCIPassth
  * MSI virtualization functions
  */
 
-static int xen_pt_msi_set_enable(XenPCIPassthroughState *s, bool enable)
+int xen_pt_msi_set_enable(XenPCIPassthroughState *s, bool enable)
 {
+    int rc;
+
     XEN_PT_LOG(&s->dev, "%s MSI.\n", enable ? "enabling" : "disabling");
 
     if (!s->msi) {
         return -1;
     }
 
+    rc = xc_physdev_msi_set_enable(xen_xc,
+                                   s->real_device.domain,
+                                   s->real_device.bus,
+                                   PCI_DEVFN(s->real_device.dev,
+                                             s->real_device.func),
+                                   PHYSDEVOP_MSI_SET_ENABLE_MSI,
+                                   enable);
+    if (rc != -ENOSYS)
+        return rc;
+
     return msi_msix_enable(s, s->msi->ctrl_offset, PCI_MSI_FLAGS_ENABLE,
                            enable);
 }
@@ -307,14 +319,27 @@ void xen_pt_msi_disable(XenPCIPassthroug
  * MSI-X virtualization functions
  */
 
-static int msix_set_enable(XenPCIPassthroughState *s, bool enabled)
+int xen_pt_msix_set_enable(XenPCIPassthroughState *s, bool enabled)
 {
+    int rc;
+
     XEN_PT_LOG(&s->dev, "%s MSI-X.\n", enabled ? "enabling" : "disabling");
 
     if (!s->msix) {
         return -1;
     }
 
+    rc = xc_physdev_msi_set_enable(xen_xc,
+                                   s->real_device.domain,
+                                   s->real_device.bus,
+                                   PCI_DEVFN(s->real_device.dev,
+                                             s->real_device.func),
+                                   PHYSDEVOP_MSI_SET_ENABLE_MSIX,
+                                   enabled);
+    if (rc != -ENOSYS)
+        return rc;
+
+
     return msi_msix_enable(s, s->msix->ctrl_offset, PCI_MSIX_FLAGS_ENABLE,
                            enabled);
 }
@@ -387,7 +412,7 @@ void xen_pt_msix_disable(XenPCIPassthrou
 {
     int i = 0;
 
-    msix_set_enable(s, false);
+    xen_pt_msix_set_enable(s, false);
 
     for (i = 0; i < s->msix->total_entries; i++) {
         XenPTMSIXEntry *entry = &s->msix->msix_entry[i];
Index: qemu/hw/xen/xen_pt.h
===================================================================
--- qemu.orig/hw/xen/xen_pt.h
+++ qemu/hw/xen/xen_pt.h
@@ -305,6 +305,7 @@ static inline uint8_t xen_pt_pci_intx(Xe
 int xen_pt_msi_setup(XenPCIPassthroughState *s);
 int xen_pt_msi_update(XenPCIPassthroughState *d);
 void xen_pt_msi_disable(XenPCIPassthroughState *s);
+int xen_pt_msi_set_enable(XenPCIPassthroughState *s, bool enable);
 
 int xen_pt_msix_init(XenPCIPassthroughState *s, uint32_t base);
 void xen_pt_msix_delete(XenPCIPassthroughState *s);
@@ -312,6 +313,7 @@ void xen_pt_msix_unmap(XenPCIPassthrough
 int xen_pt_msix_update(XenPCIPassthroughState *s);
 int xen_pt_msix_update_remap(XenPCIPassthroughState *s, int bar_index);
 void xen_pt_msix_disable(XenPCIPassthroughState *s);
+int xen_pt_msix_set_enable(XenPCIPassthroughState *s, bool enable);
 
 static inline bool xen_pt_has_msix_mapping(XenPCIPassthroughState *s, int bar)
 {
Index: qemu/hw/xen/xen_pt_config_init.c
===================================================================
--- qemu.orig/hw/xen/xen_pt_config_init.c
+++ qemu/hw/xen/xen_pt_config_init.c
@@ -1133,6 +1133,7 @@ static int xen_pt_msgctrl_reg_write(XenP
                 XEN_PT_WARN(&s->dev, "Can not bind MSI (register: %x)!\n", *val);
                 return 0;
             }
+            xen_pt_msi_set_enable(s, true);
             msi->initialized = true;
             msi->mapped = true;
         }
@@ -1502,6 +1503,8 @@ static int xen_pt_msixctrl_reg_write(Xen
     if ((*val & PCI_MSIX_FLAGS_ENABLE)
         && !(*val & PCI_MSIX_FLAGS_MASKALL)) {
         xen_pt_msix_update(s);
+        if (!(dev_value & PCI_MSIX_FLAGS_ENABLE:)
+            xen_pt_msix_set_enable(s, false);
     } else if (!(*val & PCI_MSIX_FLAGS_ENABLE) && s->msix->enabled) {
         xen_pt_msix_disable(s);
     }
